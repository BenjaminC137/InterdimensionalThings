@model CheckoutModel
@{
    ViewData["Title"] = "Checkout";
    string shipping = (string)TempData["Shipping"];
    var estimatedShipping = Model.ThingCart.ThingCartThings.Select(x => x.Thing).Max(x => x.ShippingDays);
}

@if (!this.ViewData.ModelState.IsValid)
{
    <div class="alert alert-danger">
        <ul>
            @foreach (var error in (this.ViewData.ModelState.Where(x => x.Value.Errors.Count > 0).Select(x => x.Value.Errors)))
            {
                @foreach (var message in error)
                {
                    <li>@message.ErrorMessage</li>
                }
            }
        </ul>
    </div>
}
    <form id="things-form" method="post" class=" checkout border-standard-free">
        <h3>
            Position/Address
        </h3>
        <div class="form-group">
            <label asp-for="Email"></label>
            @if (User.Identity.IsAuthenticated)
        {
            <input type="email" asp-for="Email" required class="form-control" disabled />
            <input type="hidden" asp-for="Email" />
    }
    else
    {
        <input type="email" asp-for="Email" placeholder="Jerry.Smith@aol.com" required class="form-control" />
}
        </div>
        <div class="form-group">
            <label asp-for="StreetAddress"></label>
            <input type="text" asp-for="StreetAddress" placeholder="123 Street Ave" class="form-control" />
        </div>
        <div class="form-group">
            <label asp-for="City"></label>
            <input type="text" asp-for="City" placeholder="Seattle" class="form-control" />
        </div>
        <div class="form-group">
            <label asp-for="State"></label>
            <input type="text" placeholder="Washington" asp-for="State" class="form-control" />
        </div>
        <div class="form-group">
            <label asp-for="ZipCode"></label>
            <input type="text" asp-for="ZipCode" placeholder="90210" class="form-control" />
        </div>
        <div class="form-group">
            <label>System</label>
            <input type="text" placeholder="Solar" class="form-control" />
        </div>
        <div class="form-group">
            <label>Galaxy</label>
            <input type="text" placeholder="Milky Way" class="form-control" />
        </div>
        <div class="form-group">
            <label>Universe</label>
            <input type="text" placeholder="110&10010&10&111010&1" class="form-control" />
        </div>
        <div class="form-group">
            <label>Dimension</label>
            <input type="text" placeholder="C-137" class="form-control" />
        </div>


        <div class="form-group">
            <button class="btn btn-danger" id="validateAddress" disabled>Validate Address</button>
        </div>
        <h3>
            Payment
        </h3>
        <div class="form-group">
            <label for="card-number">Card Number</label>
            <div id="card-number" class="form-control"></div>
        </div>

        <div class="form-group">
            <label for="cvv">CVV</label>
            <div id="cvv" class="form-control"></div>
        </div>
        <div class="form-group">
            <label for="expiration-date">Card Expiration Date</label>
            <div id="expiration-date" class="form-control"></div>
        </div>
        <h3>
            Delivery Method
        </h3>
        <div class=form-group>
            <label for="expiration-date">Delivery Method</label>
            <select asp-for="ShippingOption" onchange="shippingChanged()" class="form-control">
                <option value="courier">Courier Flaps</option>
                <option value="portal">Portal (instant)</option>
            </select>
            @*<form asp-controller="Things" method="post" asp-action="ChangeShipping" asp-route-id="@Model.Id">*@
            <div class="redBox">
                <b>Shipping Estimate: </b><span id="estimatedShipping">@estimatedShipping Earth Days</span>
            </div>
        </div>
        <input asp-for="Nonce" type="hidden" />

        <input type="submit" class="btn btn-danger" disabled value="Submit Order" />
    </form>
@*<form asp-controller="Things" method="post" asp-action="ChangeShipping">*@

@section Scripts{
    <script src="https://js.braintreegateway.com/web/3.35.0/js/client.min.js"></script>
    <script src="https://js.braintreegateway.com/web/3.35.0/js/hosted-fields.min.js"></script>
    <script>
        var courierTime = @estimatedShipping;

        function shippingChanged(){
            if($("#ShippingOption option:selected").val() == "courier"){
                $("#estimatedShipping").text(courierTime + " Earth Days");
            } else {
                $("#estimatedShipping").text("Instant");
                @*ShippingOption = "portal";*@
            }
        }

      var form = document.querySelector('form.checkout');
      var submit = document.querySelector('input[type="submit"]');

      braintree.client.create({
        authorization: '@ViewBag.ClientAuthorization'
      }, function (clientErr, clientInstance) {
        if (clientErr) {
          console.error(clientErr);
          return;
        }

        // This example shows Hosted Fields, but you can also use this
        // client instance to create additional components here, such as
        // PayPal or Data Collector.

        braintree.hostedFields.create({
          client: clientInstance,
          styles: {



            '::-webkit-input-placeholder': {
              'color': 'rgb(186,114,162)'
            },
             ':-moz-placeholder': {
               'color': 'rgb(186,114,162)'
            },
           '::-moz-placeholder': {
           'color': 'rgb(186,114,162)'
           },
           ':-ms-input-placeholder': {
            'color': 'rgb(186,114,162)'
            },

            'input:focus': {
            'color': 'rgb(186,114,162)'
            },



            'input': {
              'font-size': '14px',
              'text-align': 'end !important',
              'color': 'rgb(186,114,162)',
              'background': 'pink'

            },
            'input.invalid': {
              'color': 'rgb(186,114,162)'
            },







            'input.valid': {

                'color': 'rgb(195, 228, 239)'
            }
          },
          fields: {
            number: {
              selector: '#card-number',
              placeholder: '4111 1111 1111 1111'
            },
            cvv: {
              selector: '#cvv',
              placeholder: '123'
            },
            expirationDate: {
              selector: '#expiration-date',
              placeholder: '10/2019'
              }
          }
        }, function (hostedFieldsErr, hostedFieldsInstance) {
          if (hostedFieldsErr) {
            console.error(hostedFieldsErr);
            return;
          }

          submit.removeAttribute('disabled');

          form.addEventListener('submit', function (event) {
            event.preventDefault();

            hostedFieldsInstance.tokenize(function (tokenizeErr, payload) {
              if (tokenizeErr) {
                console.error(tokenizeErr);
                return;
                }
                document.querySelector("#Nonce").value = payload.nonce;
                form.submit();
            });
          }, false);
        });
      });

   $(document).ready(() => {
    $('#validateAddress').click((e) => {
        e.preventDefault();
        var lookup = {
            Street: $("#StreetAddress").removeClass("is-valid").removeClass("is-invalid").val(),
            City: $("#City").removeClass("is-valid").removeClass("is-invalid").val(),
            State: $("#State").removeClass("is-valid").removeClass("is-invalid").val(),
            ZipCode: $("#ZipCode").removeClass("is-valid").removeClass("is-invalid").val()
        };
        $('#validateAddress').attr("disabled");

        jQuery.ajax({
            url: "/checkout/validateaddress",
            type: "POST",
            data: JSON.stringify(lookup),
            dataType: "json",
            contentType: "application/json; charset=utf-8"
        })
            .done((data, textStatus, jqXHR) => {
            console.log(data);
            $("#StreetAddress").addClass("is-valid").val(data.delivery_line_1);
            $("#City").addClass("is-valid").val(data.components.city_name);
            $("#State").addClass("is-valid").val(data.components.state_abbreviation);
            $("#ZipCode").addClass("is-valid").val(data.components.zipcode + "-" + data.components.plus4_code);
        })
            .fail((data, textStates, jqXHR) => {
            $("#StreetAddress").addClass("is-invalid");
            $("#City").addClass("is-invalid");
            $("#State").addClass("is-invalid");
            $("#ZipCode").addClass("is-invalid");
            console.log(data);
        })
            .always(() => {
            $('#validateAddress').removeAttr("disabled");
        });
    }).removeAttr("disabled");
});
    </script>
}